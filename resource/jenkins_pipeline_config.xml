<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps">
    <script>pipeline {{
  agent any
  environment {{
    module = '{module_name}'
    build_id = '{build_id}'
  }}
  stages {{
    stage('Cloning Git') {{
      steps {{
        git url: '{gitUrl}', branch: '{branch}', credentialsId: '{credentialsId}'
      }}
    }}
    stage('Maven package') {{
        steps {{
            withMaven(
                // Maven installation declared in the Jenkins "Global Tool Configuration"
                maven: 'maven') {{

              // Run the maven build
              sh "mvn clean package {module_option}"

            }}
        }}
    }}
    stage('Building image') {{
      steps {{
        script {{
            dockerImage = docker.build '{imageTag}', '{docker_dir}'
        }}
      }}
    }}
    stage('Push image') {{
      steps {{
        script {{
          // docker.withRegistry( '', registryCredential ) {{
            dockerImage.push()
          // }}
        }}
      }}
    }}
  }}
  post {{
    always {{
      script {{
        body = '{{"result":"' + currentBuild.currentResult + '", "projectName": "' + currentBuild.projectName + '", "number": "' + currentBuild.number + '", "buildId": "' + build_id + '"}}'
        httpRequest url: '{notifyHttpUrl}', httpMode: 'POST', passBuildParameters: true, consoleLogResponseBody: true, requestBody: body
      }}
    }}
  }}
}}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>